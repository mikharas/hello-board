!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
Atomics	.eslintrc.js	/^		'Atomics': 'readonly',$/;"	p	class:module.exports.globals
Board	controllers/boards-controllers.js	/^const Board = require('..\/models\/board');$/;"	C
DUMMY_PRODUCTS	server.js	/^const DUMMY_PRODUCTS = []; \/\/ not a database, just some in-memory storage for now$/;"	C
FAKE_DATA	controllers/boards-controllers.js	/^const FAKE_DATA = [$/;"	C
FAKE_DATA	controllers/users-controller.js	/^const FAKE_DATA = [$/;"	C
HttpError	controllers/boards-controllers.js	/^const HttpError = require('..\/models\/http-error');$/;"	C
HttpError	controllers/users-controller.js	/^const HttpError = require('..\/models\/http-error');$/;"	C
HttpError	index.js	/^const HttpError = require('.\/models\/http-error');$/;"	C
HttpError	models/http-error.js	/^function HttpError(message, errorCode) {$/;"	c
R	controllers/boards-controllers.js	/^const R = require('ramda');$/;"	C
SharedArrayBuffer	.eslintrc.js	/^		'SharedArrayBuffer': 'readonly'$/;"	p	class:module.exports.globals
app	index.js	/^const app = express();$/;"	C
app	server.js	/^const app = express();$/;"	C
author	package.json	/^  "author": "Sarah <sarahk1280@gmail.com>",$/;"	s
babel-eslint	package.json	/^    "babel-eslint": "^10.1.0",$/;"	s	object:dependencies
board	controllers/boards-controllers.js	/^		const board = await Board.findById(placeId);$/;"	C
board	controllers/boards-controllers.js	/^	const board = FAKE_DATA.find(b => {$/;"	C
boardId	controllers/boards-controllers.js	/^	const boardId = req.params.bid;$/;"	C
boardIndex	controllers/boards-controllers.js	/^	const boardIndex = FAKE_DATA.findIndex(b => b.id === boardId);$/;"	C
boardRoutes	index.js	/^const boardRoutes = require('.\/routes\/board-routes');$/;"	C
boardSchema	models/board.js	/^const boardSchema = new mongoose.Schema({$/;"	C
body-parser	package.json	/^    "body-parser": "^1.19.0",$/;"	s	object:dependencies
bodyParser	index.js	/^const bodyParser = require('body-parser');$/;"	C
bodyParser	server.js	/^const bodyParser = require('body-parser');$/;"	C
browser	.eslintrc.js	/^		'browser': true,$/;"	p	class:module.exports.env
commonjs	.eslintrc.js	/^		'commonjs': true,$/;"	p	class:module.exports.env
constructor	models/http-error.js	/^HttpError.prototype.constructor = HttpError;$/;"	m	class:HttpError
createBoard	controllers/boards-controllers.js	/^const createBoard = async (req, res, next) => {$/;"	C
creatorBoards	controllers/boards-controllers.js	/^	const creatorBoards = R.reduce($/;"	C
creatorBoardsTitles	controllers/boards-controllers.js	/^	const creatorBoardsTitles = R.reduce((acc, { creator, title, id }) => {$/;"	C
deleteBoard	controllers/boards-controllers.js	/^const deleteBoard = (req, res, next) => {$/;"	C
dependencies	package.json	/^  "dependencies": {$/;"	o
ecmaVersion	.eslintrc.js	/^		'ecmaVersion': 2018$/;"	p	class:module.exports.parserOptions
env	.eslintrc.js	/^	'env': {$/;"	c	class:module.exports
error	controllers/boards-controllers.js	/^		const error = new HttpError('Could not find a board for the provided id', 404);$/;"	C
error	controllers/boards-controllers.js	/^		const error = new HttpError('Could not find a place with the id', 500);$/;"	C
error	controllers/boards-controllers.js	/^		const error = new HttpError('Could not find a user with the given id.', 404);$/;"	C
error	controllers/boards-controllers.js	/^		const error = new HttpError('Failed to create board.', 500);$/;"	C
error	controllers/users-controller.js	/^		const error = new HttpError('Incorrect password', 401);$/;"	C
error	controllers/users-controller.js	/^		const error = new HttpError('Wrong Credentials no username', 401);$/;"	C
errors	controllers/boards-controllers.js	/^	const errors = validationResult(req).array();$/;"	C
errors	controllers/users-controller.js	/^	const errors = validationResult(req).array();$/;"	C
es6	.eslintrc.js	/^		'es6': true$/;"	p	class:module.exports.env
eslint-config-airbnb	package.json	/^    "eslint-config-airbnb": "^18.1.0",$/;"	s	object:dependencies
exports	.eslintrc.js	/^module.exports = {$/;"	c	class:module
express	index.js	/^const express = require('express');$/;"	C
express	package.json	/^    "express": "^4.17.1",$/;"	s	object:dependencies
express	routes/board-routes.js	/^const express = require('express');$/;"	C
express	routes/user-routes.js	/^const express = require('express');$/;"	C
express	server.js	/^const express = require('express');$/;"	C
express-validator	package.json	/^    "express-validator": "^6.4.0",$/;"	s	object:dependencies
extends	.eslintrc.js	/^	'extends': 'eslint:recommended',$/;"	p	class:module.exports
foundAccount	controllers/users-controller.js	/^	const foundAccount = FAKE_DATA.find((u) => u.account_name === account_name);$/;"	C
getBoardById	controllers/boards-controllers.js	/^const getBoardById = async (req, res, next) => {$/;"	C
getUserBoardsById	controllers/boards-controllers.js	/^const getUserBoardsById = (req, res, next) => {$/;"	C
getUsers	controllers/users-controller.js	/^const getUsers = (req, res, next) => {$/;"	C
globals	.eslintrc.js	/^	'globals': {$/;"	c	class:module.exports
id	controllers/users-controller.js	/^		id: uuid(),$/;"	p	class:newUser
indent	.eslintrc.js	/^		'indent': [$/;"	p	class:module.exports.rules
isUniqueName	controllers/users-controller.js	/^const isUniqueName = (account_name) => {$/;"	C
isUniqueTitle	controllers/boards-controllers.js	/^const isUniqueTitle = (creatorCheck, titleCheck, idCheck) => {$/;"	C
license	package.json	/^  "license": "MIT",$/;"	s
linebreak-style	.eslintrc.js	/^		'linebreak-style': [$/;"	p	class:module.exports.rules
login	controllers/users-controller.js	/^const login = (req, res, next) => {$/;"	C
main	package.json	/^  "main": "index.js",$/;"	s
mongoose	index.js	/^const mongoose = require('mongoose');$/;"	C
mongoose	models/board.js	/^const mongoose = require('mongoose');$/;"	C
mongoose	package.json	/^    "mongoose": "^5.9.9",$/;"	s	object:dependencies
name	package.json	/^  "name": "backend",$/;"	s
newBoard	controllers/boards-controllers.js	/^	const newBoard = new Board({$/;"	C
newUser	controllers/users-controller.js	/^	const newUser = {$/;"	c
nodemon	package.json	/^    "nodemon": "^2.0.3",$/;"	s	object:dependencies
parserOptions	.eslintrc.js	/^	'parserOptions': {$/;"	c	class:module.exports
quotes	.eslintrc.js	/^		'quotes': [$/;"	p	class:module.exports.rules
ramda	package.json	/^    "ramda": "^0.27.0",$/;"	s	object:dependencies
router	routes/board-routes.js	/^const router = express.Router();$/;"	C
router	routes/user-routes.js	/^const router = express.Router();$/;"	C
rules	.eslintrc.js	/^	'rules': {$/;"	c	class:module.exports
scripts	package.json	/^  "scripts": {$/;"	o
semi	.eslintrc.js	/^		'semi': [$/;"	p	class:module.exports.rules
signup	controllers/users-controller.js	/^const signup = (req, res, next) => {$/;"	C
start	package.json	/^    "start": "nodemon index.js"$/;"	s	object:scripts
updateBoard	controllers/boards-controllers.js	/^const updateBoard = (req, res, next) => {$/;"	C
updatedBoard	controllers/boards-controllers.js	/^	const updatedBoard = {$/;"	C
user	controllers/users-controller.js	/^	const user = FAKE_DATA.find((u) => u.account_name == account_name);$/;"	C
userId	controllers/boards-controllers.js	/^	const userId = req.params.uid;$/;"	C
userRoutes	index.js	/^const userRoutes = require('.\/routes\/user-routes');$/;"	C
uuid	controllers/boards-controllers.js	/^const uuid = require('uuid\/v4');$/;"	C
uuid	controllers/users-controller.js	/^const uuid = require('uuid\/v4');$/;"	C
uuid	package.json	/^    "uuid": "^7.0.3"$/;"	s	object:dependencies
uuid	server.js	/^const uuid = require('uuid\/v4');$/;"	C
version	package.json	/^  "version": "1.0.0",$/;"	s
